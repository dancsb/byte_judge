openapi: 3.0.0
info:
  title: ByteJudge API
  description: |-
    This is ithe backend API for the ByteJudge app.
  termsOfService: http://bytejudge.dancs.org/tos/
  contact:
    email: apiteam@bytejudge.dancs.org
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:4080
tags:
  - name: Authentication
    description: User Authentication
  - name: User
    description: Operations about user
  - name: Friends
    description: Friends management operations
  - name: Exercise
    description: Manage programming exercises
  - name: Submission
    description: Submit and review code evaluations
paths:
  /auth/login:
    post:
      tags: [Authentication]
      summary: User login and JWT token issuance
      description: Authenticates the user and returns a JWT token if credentials are correct.
      operationId: userLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: The email address of the user
                password:
                  type: string
                  format: password
                  description: The password for the user
              required:
                - email
                - password
      responses:
        "200":
          description: Successful login and JWT token issued
          headers:
            Authorization:
              description: JWT token for authentication in future requests
              schema:
                type: string
                example: "Bearer your.jwt.token"
        "401":
          description: Unauthorized. Incorrect email or password.
        "400":
          description: Bad Request. Missing or invalid parameters.

  /auth/logout:
    post:
      tags: [Authentication]
      summary: Logout user
      description: Invalidate the current session
      operationId: userLogout
      security:
        - jwtCookieAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "Successfully logged out"

  /user:
    get:
      tags: [User]
      summary: Get leggoed in user
      description: Returns the details of the authenticated user.
      operationId: userGet
      security:
        - jwtCookieAuth: []
      responses:
        "200":
          description: User details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized. User is not logged in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags: [User]
      summary: Create a new user
      description: Creates a new user account and sends a confirmation email.
      operationId: userCreate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - username
                - email
                - password
      responses:
        "201":
          description: User created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  message:
                    type: string
              example:
                id: "123456"
                message: "User created successfully. Please check your email to activate your account."
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags: [User]
      summary: Update user account
      description: Updates the details of an existing user.
      operationId: userUpdate
      security:
        - jwtCookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
              required:
                - username
                - email
      responses:
        "200":
          description: User updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "User updated successfully."
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags: [User]
      summary: Delete user account
      description: Deletes a user account based on the userid.
      operationId: userDelete
      security:
        - jwtCookieAuth: []
      responses:
        "200":
          description: User deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "User deleted successfully."
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /user/{userId}:
    get:
      tags: [User]
      summary: Get user by Id
      description: Returns the details of a user.
      operationId: userGetById
      security:
        - jwtCookieAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: ID of the user to query
      responses:
        "200":
          description: User details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized. User is not logged in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /user_search:
    get:
      tags: [User]
      summary: Search users by partial username match
      description: Lists all users whose username partially matches the search term
      operationId: userSearch
      security:
        - jwtCookieAuth: []
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
          description: Partial or complete username to search for
      responses:
        "200":
          description: List of matching users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserList"
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /user/change_password:
    put:
      tags: [User]
      summary: Change user password
      description: Cahnges the password of an existing user.
      operationId: userChangePassword
      security:
        - jwtCookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  format: password
                newPassword:
                  type: string
                  format: password
              required:
                - oldPassword
                - newPassword
      responses:
        "200":
          description: Password changed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Password changed successfully."
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized. Incorrect old password.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /user/email_confirm:
    post:
      tags: [User]
      summary: Confirm user email address
      description: Confirms a user email address based on a token sent via email.
      operationId: emailConfirm
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
              required:
                - token
      responses:
        "200":
          description: User account confirmed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Account confirmed successfully."
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /friends/request/{userId}:
    post:
      tags: [Friends]
      summary: Send friend request
      description: Send a friend request to another user
      operationId: sendFriendRequest
      security:
        - jwtCookieAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: ID of the user to send friend request to
      responses:
        "200":
          description: Friend request sent successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FriendRequest"
        "400":
          description: Invalid request (e.g., trying to friend yourself)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Friend request already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /friends/requests/ingoing:
    get:
      tags: [Friends]
      summary: Get incoming friend requests
      description: Get list of users who sent friend requests to the authenticated user
      operationId: getFriendRequestsIngoing
      security:
        - jwtCookieAuth: []
      responses:
        "200":
          description: List of pending friend requests retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserList"

  /friends/requests/outgoing:
    get:
      tags: [Friends]
      summary: Get incoming friend requests
      description: Get list of users who is recived friend requests from the authenticated user
      operationId: getFriendRequestsOutgoing
      security:
        - jwtCookieAuth: []
      responses:
        "200":
          description: List of pending friend requests retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserList"

  /friends/request/{userId}/accept:
    put:
      tags: [Friends]
      summary: Accept friend request
      description: Accept a pending friend request from specific user
      operationId: acceptFriendRequest
      security:
        - jwtCookieAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: ID of the user whose friend request to accept
      responses:
        "200":
          description: Friend request accepted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Friend"
        "403":
          description: Not authorized to accept this request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Friend request not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /friends/request/{userId}/reject:
    put:
      tags: [Friends]
      summary: Reject friend request
      description: Reject a pending friend request from specific user
      operationId: rejectFriendRequest
      security:
        - jwtCookieAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: ID of the user whose friend request to reject
      responses:
        "200":
          description: Friend request rejected successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Friend"
        "403":
          description: Not authorized to reject this request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Friend request not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /friends:
    get:
      tags: [Friends]
      summary: Get friend list
      description: Get list of all confirmed friends for the authenticated user
      operationId: getFriendList
      security:
        - jwtCookieAuth: []
      responses:
        "200":
          description: Friend list retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserList"

  /friends/{userId}:
    delete:
      tags: [Friends]
      summary: Remove friend
      description: Remove a user from friends list
      operationId: deleteFriend
      security:
        - jwtCookieAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: ID of the friend to remove
      responses:
        "200":
          description: Friend removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "Friend removed successfully"
        "404":
          description: Friendship not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /submission:
    post:
      tags:
        - Submission
      summary: Submit a new code solution
      description:
        Accepts userId, exerciseId, and sourceCode. Queues the submission
        for evaluation.
      operationId: submitSolution
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                exerciseId:
                  type: string
                sourceCode:
                  type: string
              required:
                - exerciseId
                - sourceCode
      responses:
        "202":
          description: Submission accepted and queued
          content:
            application/json:
              schema:
                type: object
                properties:
                  submissionId:
                    type: string
                  message:
                    type: string
  /submission/{id}:
    get:
      tags:
        - Submission
      summary: Get submission status and results
      description: Returns the evaluation status and results (if available)
      operationId: getSubmissionStatus
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Submission found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        input:
                          type: string
                        output:
                          type: string
                        actual:
                          type: string
                        passed:
                          type: boolean
                        error:
                          type: string
        "404":
          description: Submission not found
  /exercise:
    get:
      tags:
        - Exercise
      summary: List all exercises
      operationId: listExercises
      responses:
        "200":
          description: List of exercises
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    title:
                      type: string
                    description:
                      type: string
    post:
      tags:
        - Exercise
      summary: Create a new exercise
      operationId: createExercise
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                testCases:
                  type: array
                  items:
                    type: object
                    properties:
                      input:
                        type: string
                      output:
                        type: string
                timeLimit:
                  type: number
                memoryLimitKB:
                  type: number
              required:
                - title
                - description
                - testCases
      responses:
        "201":
          description: Exercise created
          content:
            application/json:
              schema:
                type: object
                properties:
                  exerciseId:
                    type: string
  /exercise/{id}:
    get:
      tags:
        - Exercise
      summary: Get details of a single exercise
      operationId: getExercise
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Exercise details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  title:
                    type: string
                  description:
                    type: string
                  testCases:
                    type: array
                    items:
                      type: object
                      properties:
                        input:
                          type: string
                        output:
                          type: string
                  timeLimit:
                    type: number
                  memoryLimitKB:
                    type: number
        "404":
          description: Exercise not found
components:
  securitySchemes:
    jwtCookieAuth:
      type: apiKey
      in: cookie
      name: jwt
      description: >
        JWT token passed via a cookie named `jwt`. 
        This token is required for accessing secured endpoints.
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
      required:
        - error
        - message
      example:
        error: "BadRequest"
        message: "Invalid input provided."
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - username
        - email
    FriendRequest:
      type: object
      properties:
        id:
          type: string
        sent:
          type: string
          description: User ID of the sender
        received:
          type: string
          description: User ID of the receiver
        accepted:
          type: boolean
          default: false
      required:
        - id
        - sent
        - received
        - accepted
      example:
        id: "12345"
        sent: "user123"
        received: "user456"
        accepted: false
    Friend:
      type: object
      properties:
        message:
          type: string
      example:
        message: "Action succesful"
    UserList:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/User"
      required:
        - users
      example:
        users:
          - id: "123"
            username: "john_doe"
            email: "john@example.com"
            createdAt: "2024-01-01T10:00:00Z"
          - id: "124"
            username: "johnny"
            email: "johnny@example.com"
            createdAt: "2024-02-01T11:00:00Z"
